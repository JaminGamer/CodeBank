--**Creating a JSON file for reading/writing with cJSON**--

0.0 Info:
0.1 cJSON*->type
// Data types stored in cJSON*->type
// type defines as found in cJSON.h
#define cJSON_False 0
#define cJSON_True 1
#define cJSON_NULL 2
#define cJSON_Number 3
#define cJSON_String 4
#define cJSON_Array 5
#define cJSON_Object 6

Use cJSON*->type to check what type the object you found is

0.2 cJSON* object
// pasted from cJSON.h
typedef struct cJSON {
	struct cJSON *next,*prev;	/* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */
	struct cJSON *child;		/* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */

	int type;					/* The type of the item, as above. */

	char *valuestring;			/* The item's string, if type==cJSON_String */
	int valueint;				/* The item's number, if type==cJSON_Number */
	double valuedouble;			/* The item's number, if type==cJSON_Number */

	char *string;				/* The item's name string, if this item is the child of, or is in the list of subitems of an object. */
} cJSON;

1.0 Basics:
1.1 Syntax
Every file must be contained inside of a block ({braces})
{
	// data
}
Each item is comprised of a "Key" and Value(type, number, bool, or "string")
"Key": "Value" // string
"Key": 1 // number or double
"Key": TRUE // bool

Also you may create an Array to hold multiple items
"Array" [{
	"ArrayItem1": "value1", // comma to seperate
	"ArrayItem2": "value2"
}]

1.2 Array Good Practices
Each item or object inside of a file must be seperated with
a comma (,) from other objects that exist in the same set of braces or list
ex.
{
	"Object1": 1,
	"Array1": [{	
		"Object2": 2 //<- no comma
	}], //<-comma
	"Object3": 3
}
**Never seperate items by braces({}), only commas(,)**
BAD example...
{
	"EnemyList":	[{
			"Name":	"Ogre", //<- this should be an array that holds items
			"Attack":	10  //<- not items themselves. Add a container object.
		}, { // remember, when refering to a new Object() you should change your [square braces] for a new array        
			"Name":	"Goblin", <- BAD
			"Attack":	8
		}]
}
GOOD example...
{
	"ShapeList":	[{
			"RedShapes":	[{ //<- first array object is another array with an identifiable string "RedShapes"
					"Shape":	"Triangle",
					"Shape":	"Square",
					"Shape":	"Circle"
				}], // <- seperate arrays using a new set of sqaure braces([])
			"BlueShapes":	[{
					"Shape":	"Triangle",
					"Shape":	"Square",
					"Shape":	"Circle"
				}]
		}]
}

For multi dimensional/level arrays, keep items organized by creating arrays of arrays until you finally end with an item.

2.0 Creating a file:
2.1 Commented example
{ // START FILE
	"Item1": "value", // ITEM
	
	"Array1": [{ // START ARRAY
		"ArrayObject1": 1, // ITEM
		"ArrayObject2": 2 // ITEM
	}], //<- remember the commas, END ARRAY
	
	"Array2Lv1": [{ // START ARRAY Lv1
		"Array2Lv2Array1": [{ // START ARRAY LV2
			"Array2Lv2Array1Item1" 1,
			"Array2Lv2Array1Item2" 2
		}], // END ARRAY LV2
		"Array2Lv2Array2": [{ // START ARRAY LV2
			"Array2Lv2Array2Item1" 1,
			"Array2Lv2Array2Item2" 2
		}] // END ARRAY Lv2
	}] // END ARRAY Lv1
} // END FILE

2.2 Pasted File
{
	"Filename":	"TestFile1",
	"GameSave":	[{
			"Level":	2,
			"CurrentHealth":	50
		}],
	"ShapeList":	[{
			"RedShapes":	[{
					"Shape":	"Triangle",
					"Shape":	"Square",
					"Shape":	"Circle"
				}],
			"BlueShapes":	[{
					"Shape":	"Triangle",
					"Shape":	"Square",
					"Shape":	"Circle"
				}]
		}]
}

3.0 Debugging

NULL ROOT:: if OpencJSONStream returns a null pointer, then cJSON probably encoutered a compile error.
- Check that the string passed in was a proper .txt file with correct return characters etc.
- Check for typos in .json file. There is a check for null root* that will print
  "Could not open cJSON stream. Possible compile error. Check for typos!" to output window.
- cJSON_Parse(str) will return the null pointer

4.0 Extended cJSON Reference
cJSON* Item = cJSON_GetObjectItem(object, "Key"); // returns an item from within an object {braces}, item can be any type
cJSON* object = cJSON_GetArrayItem(array, "Key"); // returns an object ({braces}) by index from the array